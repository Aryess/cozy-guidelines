{"name":"Cozy-guidelines","tagline":"Cozy Code Guidelines","body":"# Cozy Code Guidelines\r\n\r\n## Generic code style\r\n\r\n* lines must not be longer than 80 characters\r\n* indentation must be done with 4 spaces\r\n* file names should be in snake\\_case\r\n* variables name must not be abbreviated\r\n* class names should be CamelCase, starting with uppercase\r\n* two blank lines between functions\r\n* one blank line at the end of files.\r\n\r\n## CSS / Stylus\r\n\r\n* indentation must be done with 4 spaces\r\n* 2 blank lines between root levels\r\n* nesting must not exceed 3 levels (except pseudo-classes styles)\r\n* avoid use of `{}`, `:` and `;` as they are optionnal in Stylus\r\n* avoid use of `#ids` in CSS selectors\r\n* all class names must be written in lowercase\r\n* classes used for design (styles) are prefixed with `ui-` and must not be\r\nused to target elements in JS files\r\n* declaration order should go from positionning to typography, such as :\r\n\r\n```stylus\r\ndiv\r\n    // Positionning\r\n    z-index  5\r\n    position absolute\r\n    top      0\r\n    left     0\r\n\r\n    // Box-model\r\n    display    block\r\n    box-sizing border-box\r\n    width      60vw\r\n    margin     0 auto\r\n\r\n    // Borders and padding\r\n    border        1px solid\r\n    border-radius 50%\r\n    padding       1em\r\n\r\n    // Colors\r\n    background-color black\r\n    color            white\r\n\r\n    // Typo\r\n    font-family MavenPro\r\n    font-size   1em\r\n    line-height 1.5em\r\n```\r\n\r\n* a `color` should comes with an explicit `background-color` declaration\r\n\r\n\r\n## Coffeescript\r\n\r\n* no parenthesis in function declaration when it has no parameter\r\n* `or` and `and` must be used instead of `||` and `&&`\r\n* `not` must be used instead of `!`\r\n* the `return` keyword should be explicit when needed\r\n* variables names should be camelCase, starting with lowercase\r\n* describe all options field in the comments\r\n* `field: \"value\"` rather than `field : \"value\"`\r\n* space beetween `()` and `->` : `(abc) ->`\r\n\r\n## Javascript\r\n\r\n* variables names should be camelCase, starting with lowercase\r\n* describe all options field in the comments\r\n\r\n## Python\r\n\r\n* variables names should be snake\\_case, starting with lowercase\r\n* global variables should be written with uppercase\r\n* Files should be [pep8](http://www.python.org/dev/peps/pep-0008/) compliant\r\n\r\n## Backbone\r\n\r\n### Views\r\n\r\nViews should :\r\n- have the default Backbone constructor MyView(options)\r\n- not model.fetch() themselves\r\n- not render() themselves\r\n- not fail when rendered with a non-fetched Model\r\n- not fail when rendered multiple time\r\n- have the same snake\\_case\\_file\\_name than their templates\r\n\r\n\r\n## Node.js\r\n\r\n### Catching exception\r\n\r\nCatching process level exception may corrupt/leak memory, apps sould exit when\r\nit happens and let the cozy-controller restart them.\r\n\r\n```coffee\r\nprocess.on 'uncaughtException', (err) =>\r\n   console.log err.stack\r\n   process.exit 1\r\n```\r\n### Return Shortcuts\r\n\r\nReturn shortcuts should not be used by default. They can be used to avoid branchings that have very few meaning. The most known case where it occurs is:\r\n\r\n```coffeescript\r\nmyfunc (err) ->\r\n    return callback err if err\r\n```\r\n\r\n## Localisation\r\n\r\nLocalisation is based on keys. In the code, there is no string that is directly displayed. Every string should refer to a translation key. Translations keys are stored in localisation files named with the locale (`en` for English, `fr` for French, etc.).\r\n\r\n[Exemple of a localisation folder](https://github.com/cozy/cozy-home/tree/master/client/app/locales)\r\n\r\nHere are the rules to follow when using locale keys:\r\n\r\n* Separators are spaces, other separators must be discarded\r\n* The first word describes the context\r\n* key names must be lowercased\r\n* key names must be no longer than 40 chars or 6 words\r\n* key names must be self-explicit\r\n* key names must be in english\r\n* key names are sorted by alphabetical order\r\n\r\n\r\n## Express / Americano\r\n\r\n### Instance routes\r\n\r\nWhen you write an API that works on a given instance of an object you should\r\nuse the param function of Americano/Express. This function acts as a\r\npreprocessor to fetch given instance:\r\n\r\nIn sever/controllers/routes.coffee:\r\n\r\n```coffee\r\nalarms = require './alarms'\r\n\r\nmodule.exports =\r\n    'alarmid':\r\n        param: alarms.fetch\r\n```\r\n\r\nIn sever/controllers/alarms.coffee:\r\n\r\n```coffee\r\nmodule.exports.fetch = (req, res, next, id) ->\r\n    Alarm.find id, (err, alarm) =>\r\n        if err or not alarm\r\n            res.send error: true, msg: \"Alarm not found\", 404\r\n        else\r\n            req.alarm = alarm\r\n            next()\r\n```\r\n\r\n\r\n### Response\r\n\r\n### Success response\r\n\r\n* Always set the proper status (`200` for success, `201` for creation, `204` for deletion).\r\n* Put objects as a response of a success.\r\n\r\n```coffeescript\r\nres.status(201).send(newContact)\r\n```\r\n\r\n### Error response\r\n\r\nAlways returned error with the proper status too by using the `next` function from Express:\r\n\r\n```coffeescript\r\nerr = new Error \"Something wrong occured\"\r\nerr.status = 404\r\nreturn err\r\n```\r\n\r\nIf the error status is 500, no need to specify it again:\r\n\r\n```coffee\r\nmodule.exports.doStuff = (req, res, next) =>\r\n    File.all (err, files) -\r\n        if err?\r\n            next err\r\n        else\r\n            res.send files\r\n```\r\n\r\n## What is Cozy?\r\n\r\n![Cozy Logo](https://raw.github.com/cozy/cozy-setup/gh-pages/assets/images/happycloud.png)\r\n\r\n[Cozy](http://cozy.io) is a platform that brings all your web services in the\r\nsame private space.  With it, your web apps and your devices can share data\r\neasily, providing you with a new experience. You can install Cozy on your own\r\nhardware where no one profiles you.\r\n\r\n## Community\r\n\r\nYou can reach the Cozy Community by:\r\n\r\n* Chatting with us on IRC #cozycloud on irc.freenode.net\r\n* Posting on our [Forum](https://forum.cozy.io)\r\n* Posting issues on the [Github repos](https://github.com/cozy/)\r\n* Mentioning us on [Twitter](http://twitter.com/mycozycloud)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}